#!/bin/sh
#
#  ChromeSSB: Run a Chrome SSB
#
#  Copyright (C) 2015 David Marmor
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 


# SAFESOURCE -- safely source a script (version 1.0)
function safesource {
    if [ "$2" ] ; then
	fileinfo="$2"
    else
	fileinfo="$1"
	[[ "$fileinfo" =~ /([^/]+)$ ]] && fileinfo="${BASH_REMATCH[1]}"
    fi
    
    if [ -e "$1" ] ; then
	source "$1" > /dev/null 2>&1
	if [ $? != 0 ] ; then
	    cmdtext="Unable to load $fileinfo."
	    return 1
	fi
    else
	cmdtext="Unable to find $fileinfo."
	return 1
    fi

    return 0
}


# ALERT -- display an alert dialogue
function alert {  #  TITLE MESSAGE ICON (stop, caution, note)
    msg="$1" ; shift
    title="$1" ; shift ; [ "$title" ] && title="with title \"$title\""
    icon="$1" ; shift ; [ "$icon" ] && icon="with icon $icon"
    
    cmdtext=$(osascript -e "display dialog \"$msg\" $icon buttons {\"OK\"} default button \"OK\" $title" 2>&1)
}


# ABORT -- display an error dialogue and abort
function abort {
    alert "$1" "Unable to Run" stop
    exit $2
}


# NEWVERSION -- check if the second passed version is greater than the first
function newversion {
    local re='^([0-9]+)\.([0-9]+)\.([0-9]+)'
    if [[ "$1" =~ $re ]] ; then
	old=("${BASH_REMATCH[@]:1}")
    else
	old=( 0 0 0 )
    fi
    if [[ "$2" =~ $re ]] ; then
	new=("${BASH_REMATCH[@]:1}")
    else
	new=( 0 0 0 )
    fi

    local i= ; local idx=( 0 1 2 )
    for i in "${idx[@]}" ; do
	if [ "${old[$i]}" -lt "${new[$i]}" ] ; then
	    echo "1"
	    return 1
	fi
	[ "${old[$i]}" -gt "${new[$i]}" ] && return 0
    done
    
    return 0
}


# RELAUNCH -- relaunch this app after a delay
function relaunch {
    [ "$1" ] && sleep "$1"
    open "$myPath"
}


# BOOTSTRAP RUNTIME SCRIPT

# determine location of runtime script
myPath=$(cd "$(dirname "$0")/../.."; pwd)
myContents="$myPath/Contents"
[ $? != 0 ] && abort "Unable to determine MakeChromeSSB path." 1
[[ "$myPath" =~ \.[aA][pP][pP]$ ]] || abort "Unexpected MakeChromeSSB path." 1

# load main runtime functions
safesource "${myPath}/Contents/Resources/Scripts/runtime.sh" "runtime script"
[ $? != 0 ] && abort "$cmdtext" 1


# GET BASIC APP INFORMATION

# load config.sh file
safesource "$myPath/Contents/$appConfigScript" "config file"
[ $? != 0 ] && abort "$cmdtext" 1

# get Google Chrome info
chromeinfo
[ $? != 0 ] && abort "$cmdtext" 1

# by default we don't need to update the config file
updateconfig=


# CHECK FOR NEW VERSION OF MAKECHROMESSB AND UPDATE

mcssbinfo
if [ \( $? = 0 \) -a $(newversion "$SSBVersion" "$mcssbVersion") ] ; then

    updateErr=

    # Ask about updating
    doUpdate=$(osascript -e '
try
    set myIcon to (POSIX file "'"$myPath/Contents/Resources/$CFBundleIconFile"'")
on error
    set myIcon to caution
end try
try
    button returned of (display dialog "A new version of the MakeChromeSSB runtime was found ('"$mcssbVersion"'). Would you like to update now?" with title "Update" with icon myIcon buttons { "Update", "Later", "Don'"'"'t Ask Again For This Version" } default button "Update" cancel button "Later")
on error number -128
    "Later"
end try')
    
    if [ $? != 0 ] ; then
	cmdtext="AppleScript error."
	updateErr=1
    fi

    if [ \( ! "$updateErr" \) ] ; then
	case "$doUpdate" in
	    Update)
		# read in the new runtime
		safesource "${mcssbPath}/Contents/Resources/Runtime/Resources/Scripts/runtime.sh" "updated runtime script"
		if [ $? != 0 ] ; then
		    updateErr=1
		else
		    # use new runtime to update the SSB
		    updatessb "$myPath"
		    [ $? != 0 ] && updateErr=1

		    # relaunch!
		    relaunch 1 &
		    disown -ar
		    exit 0
		fi
		;;
	    Later)
		# don't update
		doUpdate=
		;;
	    *)
		# pretend we're already at the current version
		SSBVersion="$mcssbVersion"
		updateconfig=1
		;;
	esac
    fi

    # alert the user to any error, but leave the SSB functional
    if [ "$updateErr" ] ; then
	# Please try update again later.
	alert "$cmdtext Please try update again later."
    fi        
fi


# CHECK AND UPDATE CHROME LINKS

# update config variable
if [ "$SSBChromePath" != "$chromePath" ] ; then
    SSBChromePath="$chromePath"
    updateconfig=1
fi

# check if the Chrome link is either: not a link; not executable; or not pointing to the real Chrome executable
myChromeLink="$myContents/$appChromeLink"
if [ \( ! -h "$myChromeLink" \) -o \
	\( ! -x "$myChromeLink" \) -o \
	\( "$chromeExec" != "$(readlink "$myChromeLink" 2> /dev/null)" \) ] ; then
    
    # display a relink alert
    alert "Google Chrome appears to have moved. Attempting to relink..." "Relinking Chrome" caution
    
    # relink to Google Chrome
    linkchrome "$myContents"
    [ $? != 0 ] && abort "$cmdtext" 1
fi

# check for new version of Chrome and update
if [ "$SSBChromeVersion" != "$chromeVersion" ] ; then
    
    # display a Chrome update alert
    alert "New version of Google Chrome found. Updating SSB..." "New Chrome Version" caution
    
    # set new version number for config file
    SSBChromeVersion="$chromeVersion"
    
    # use new runtime to update the SSB
    updatessb "$myPath" '' ChromeOnly
    [ $? != 0 ] && abort "$cmdtext" 1
    
    # relaunch!
    relaunch 1 &
    disown -ar
    exit 0
fi

# update config file
if [ "$updateconfig" ] ; then
    writeconfig "$myContents"
    [ $? != 0 ] && abort "$cmdtext" 1
fi


# SET PROFILE PATH AND LAUNCH THE SSB

myProfilePath="${HOME}/Library/Application Support/Chrome SSB/${CFBundleDisplayName}"

exec "$myChromeLink" --user-data-dir="$myProfilePath" "${SSBCommandLine[@]}"
